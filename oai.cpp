// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include <Windows.h>
#include <iostream>
#include <WinInet.h>
#include <vector>

#pragma comment(lib, "Wininet.lib")

bool CallOpenAICompletionAPI(const std::string& prompt, std::string& response) {
    HINTERNET hInternet = InternetOpen("WinInetOpenAIAgent", INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
    if (hInternet == NULL) {
        std::cerr << "InternetOpen failed. Error: " << GetLastError() << std::endl;
        return false;
    }

    std::string url = "v1/chat/completions";
    HINTERNET hConnect = InternetConnect(hInternet, "api.openai.com", INTERNET_DEFAULT_HTTPS_PORT, NULL, NULL, INTERNET_SERVICE_HTTP, 0, 0);
    if (hConnect == NULL) {
        std::cerr << "InternetConnect failed. Error: " << GetLastError() << std::endl;
        InternetCloseHandle(hInternet);
        return false;
    }

    LPCSTR acceptTypes[] = { "application/json", NULL };
    HINTERNET hRequest = HttpOpenRequest(hConnect, "POST", url.c_str(), "HTTP/1.1", NULL, acceptTypes, INTERNET_FLAG_SECURE | INTERNET_FLAG_RELOAD, 0);
    if (hRequest == NULL) {
        std::cerr << "HttpOpenRequest failed. Error: " << GetLastError() << std::endl;
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    if (!HttpAddRequestHeaders(hRequest, "Content-Type: application/json", -1, HTTP_ADDREQ_FLAG_ADD | HTTP_ADDREQ_FLAG_REPLACE)) {
        std::cerr << "HttpAddRequestHeaders failed. Error: " << GetLastError() << std::endl;
        InternetCloseHandle(hRequest);
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    std::string authHeader = "Bearer "; // Replace with your API key;
    if (!HttpAddRequestHeaders(hRequest, ("Authorization: " + authHeader).c_str(), -1, HTTP_ADDREQ_FLAG_ADD | HTTP_ADDREQ_FLAG_REPLACE)) {
        std::cerr << "HttpAddRequestHeaders failed. Error: " << GetLastError() << std::endl;
        InternetCloseHandle(hRequest);
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    std::string postData = R"({
    "model": "gpt-3.5-turbo",
    "messages": [{"role": "user", "content": "Say this is a test!"}],
    "temperature": 0.7
    })";


    if (!HttpSendRequest(hRequest, NULL, 0, (LPVOID)postData.c_str(), postData.length())) {
        std::cerr << "HttpSendRequest failed. Error: " << GetLastError() << std::endl;
        InternetCloseHandle(hRequest);
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    std::vector<char> buffer(4096);
    DWORD bytesRead;
    while (InternetReadFile(hRequest, &buffer[0], buffer.size(), &bytesRead) && bytesRead > 0) {
        response.append(buffer.begin(), buffer.begin() + bytesRead);
    }

    InternetCloseHandle(hRequest);
    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);
    return true;
};


BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH:
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

extern "C" __declspec(dllexport) LPSTR CallOpenAICompletionAPIWrapper(LPCSTR lpPrompt) {
    const std::string apiKey = ""; 
    std::string response;
    std::string prompt(lpPrompt);

    try {
        if (CallOpenAICompletionAPI(prompt, response)) {
            std::cout << response;
        }
        else {
            DWORD error = GetLastError();
        }
    }
    catch (...) {
        DWORD error = GetLastError();
    }

    // Allocate memory for the response
    char* responseBuffer = new char[response.length() + 1];
    strncpy_s(responseBuffer, response.length() + 1, response.c_str(), response.length());

    // Null-terminate the response string
    responseBuffer[response.length()] = '\0';

    return responseBuffer;
}
